// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int         @id @default(autoincrement())
  name        String     
  email      String        @unique
  password      String
  ideas         Idea[]      // Relationship to ideas posted by the user
  votes         Vote[]      // Relationship to votes cast by the user
  comments      Comment[]   // Relationship to comments made by the user
  notifications Notification[] // Relationship to notifications for the user
  createdAt     DateTime    @default(now())
}

model Idea {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  category    String    // Investment category, e.g., stocks, real estate, crypto
  estimatedReturn Float? // Optional field for estimated returns
  published   Boolean   @default(false)
  author      User      @relation(fields: [authorId], references: [ userId ])
  authorId    Int
  votes       Vote[]    // Relationship to votes on this idea
  comments    Comment[] // Relationship to comments on this idea
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Notification Notification[]
}

model Vote {
  id       Int     @id @default(autoincrement())
  value    Int     // 1 for upvote, -1 for downvote
  user     User    @relation(fields: [userId], references: [ userId ])
  userId   Int
  idea     Idea    @relation(fields: [ideaId], references: [id])
  ideaId   Int
  createdAt DateTime @default(now())

  @@unique([userId, ideaId]) // Ensures each user can only vote once per idea
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  user        User      @relation(fields: [userId], references: [ userId ])
  userId      Int
  idea        Idea      @relation(fields: [ideaId], references: [id])
  ideaId      Int
  parentId    Int?      // Optional field for nested comments (replies)
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  createdAt   DateTime  @default(now())
}

model Notification {
  id          Int       @id @default(autoincrement())
  message     String
  user        User      @relation(fields: [userId], references: [ userId ])
  userId      Int
  idea        Idea?     @relation(fields: [ideaId], references: [id]) // Optional link to the idea if relevant
  ideaId      Int?
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}
